// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package webpb

import (
	context "context"
	web "github.com/harrybrwn/remora/web"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PageFetcherClient is the client API for PageFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageFetcherClient interface {
	Links(ctx context.Context, in *web.PageRequest, opts ...grpc.CallOption) (*PageResponse, error)
	Enqueue(ctx context.Context, in *web.PageRequest, opts ...grpc.CallOption) (*Response, error)
}

type pageFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewPageFetcherClient(cc grpc.ClientConnInterface) PageFetcherClient {
	return &pageFetcherClient{cc}
}

func (c *pageFetcherClient) Links(ctx context.Context, in *web.PageRequest, opts ...grpc.CallOption) (*PageResponse, error) {
	out := new(PageResponse)
	err := c.cc.Invoke(ctx, "/web.PageFetcher/links", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageFetcherClient) Enqueue(ctx context.Context, in *web.PageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/web.PageFetcher/enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageFetcherServer is the server API for PageFetcher service.
// All implementations must embed UnimplementedPageFetcherServer
// for forward compatibility
type PageFetcherServer interface {
	Links(context.Context, *web.PageRequest) (*PageResponse, error)
	Enqueue(context.Context, *web.PageRequest) (*Response, error)
	mustEmbedUnimplementedPageFetcherServer()
}

// UnimplementedPageFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedPageFetcherServer struct {
}

func (*UnimplementedPageFetcherServer) Links(context.Context, *web.PageRequest) (*PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Links not implemented")
}
func (*UnimplementedPageFetcherServer) Enqueue(context.Context, *web.PageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (*UnimplementedPageFetcherServer) mustEmbedUnimplementedPageFetcherServer() {}

func RegisterPageFetcherServer(s *grpc.Server, srv PageFetcherServer) {
	s.RegisterService(&_PageFetcher_serviceDesc, srv)
}

func _PageFetcher_Links_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(web.PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageFetcherServer).Links(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.PageFetcher/Links",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageFetcherServer).Links(ctx, req.(*web.PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageFetcher_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(web.PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageFetcherServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.PageFetcher/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageFetcherServer).Enqueue(ctx, req.(*web.PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PageFetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "web.PageFetcher",
	HandlerType: (*PageFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "links",
			Handler:    _PageFetcher_Links_Handler,
		},
		{
			MethodName: "enqueue",
			Handler:    _PageFetcher_Enqueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "page.proto",
}
